"use strict";angular.module("docsModule",["ngAnimate","ui.router"]),angular.module("formieIonicDemo").requires.push("docsModule"),angular.module("formieIonicDemo").config(["$stateProvider",function(e){e.state("demo.docs",{url:"",template:'<div class="jsguideDocView"><ts-doclet-menu></ts-doclet-menu><div ui-view></div></div>',"abstract":!0}).state("demo.docs.guide",{url:"/guide/:guideId",template:"<ts-guide></ts-guide>"}).state("demo.docs.doclet",{url:"/doclet/:docletId",template:"<ts-doclet></ts-doclet>"})}]),angular.module("docsModule").factory("jsguideDataService",[function(){var e={guides:{},doclets:{}};return e.menu={guides:["guide"],doclets:{"model.enum":["FormFieldType"],"model.class":["Form","FormField"],"model.interface":["HelpData","ValidationData"]}},e.guides.guide="<h1 id=guide>Guide</h1><ol><li>Create a form<ul><li>Write a form using json</li><li>Add groups and fields to the form</li><li>Set validation rules to the fields</li><li>Add help messages to the fields</li></ul></li><li>Add the form data to your views<ul><li>Create a directive</li><li>Set the form data</li><li>Configure the directive options</li></ul></li></ol><h2 id=create-a-form>Create a form</h2><p>A <a href=#/docs/doclet/Form>Form</a> requires three properties, id (string), title (string) and fields (an array of form fields):</p><pre><code class=lang-js>{\n  &quot;id&quot;: &quot;formId&quot;,\n  &quot;title&quot;: &quot;Form Title&quot;,\n  &quot;fields&quot;: []\n}\n</code></pre><p>Next, add some form fields to the fields array.</p><p>A <a href=#/docs/doclet/FormField>FormField</a> consists of three basic properties, id (string), type (string) and label (string):</p><pre><code class=lang-js>{\n  &quot;id&quot;: &quot;formId&quot;,\n  &quot;title&quot;: &quot;Form Title&quot;,\n  &quot;fields&quot;: [\n    {\n      &quot;id&quot;: &quot;textFieldId&quot;,\n      &quot;type&quot;: &quot;text&quot;,\n      &quot;label&quot;: &quot;Write some text&quot;\n    }\n  ]\n}\n</code></pre><p>The enumeration <a href=#/docs/doclet/FormFieldType>FormFieldType</a> describes all the accepted field types, including two group types and many input types.</p><p>The group types are &#39;group&#39; and &#39;choiceGroup&#39;.</p><h2 id=add-the-form-data-to-your-views>Add the form data to your views</h2><p>This step is pretty simple, just declare a <a href=#/docs/doclet/tsForm>tsForm</a> directive in your view and set the &#39;form&#39; parameter with the form data.</p><pre><code class=lang-html>&lt;ts-form form=&quot;form&quot;&gt;&lt;/ts-form&gt;\n</code></pre>",e.doclets.FormField={doclet:{comment:"/**\n     * @tsdoc model.class\n     * @name FormField\n     *\n     * @description\n     * Model for a form field.\n     *\n     * @property {string} id The field id.\n     * @property {string} type Field type (options described in FormFieldType).\n     * @property {string} question Field question or instructions.\n     * @property {string} label Field label.\n     * @property {string} placeholder Field placeholder.\n     * @property {string[]} options Array of options (specific to type 'option').\n     * @property {ValidationData} validation Validation rules.\n     * @property {HelpData} help Help options.\n     * @property {boolean} abstract If the group field is abstract (specific to types 'group' and 'choiceGroup').\n     * @property {FormField[]} subfields Array of subfields (specific to type 'group').\n     * @property {FormField} choiceField The field whose answer is linked to the choiceSubfields (specific to type 'choiceGroup').\n     * @property {Object.<string, FormField[]>} choiceSubfields A map containing the subfields for each choice (specific to type 'choiceGroup').\n     */",meta:{range:[4708,5795],filename:"models.js",lineno:224,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},kind:"class",tsdoc:"model.class",name:"FormField",description:"<p>Model for a form field.</p>",properties:[{type:{names:["string"]},description:"<p>The field id.</p>",name:"id"},{type:{names:["string"]},description:"<p>Field type (options described in FormFieldType).</p>",name:"type"},{type:{names:["string"]},description:"<p>Field question or instructions.</p>",name:"question"},{type:{names:["string"]},description:"<p>Field label.</p>",name:"label"},{type:{names:["string"]},description:"<p>Field placeholder.</p>",name:"placeholder"},{type:{names:["Array.<string>"]},description:"<p>Array of options (specific to type 'option').</p>",name:"options"},{type:{names:["ValidationData"]},description:"<p>Validation rules.</p>",name:"validation"},{type:{names:["HelpData"]},description:"<p>Help options.</p>",name:"help"},{type:{names:["boolean"]},description:"<p>If the group field is abstract (specific to types 'group' and 'choiceGroup').</p>",name:"abstract"},{type:{names:["Array.<FormField>"]},description:"<p>Array of subfields (specific to type 'group').</p>",name:"subfields"},{type:{names:["FormField"]},description:"<p>The field whose answer is linked to the choiceSubfields (specific to type 'choiceGroup').</p>",name:"choiceField"},{type:{names:["Object.<string, Array.<FormField>>"]},description:"<p>A map containing the subfields for each choice (specific to type 'choiceGroup').</p>",name:"choiceSubfields"}],longname:"FormField",scope:"global",___id:"T000002R000084",___s:!0},subdoclets:{}},e.doclets.FormFieldType={doclet:{comment:"/**\n     * @tsdoc model.enum\n     * @name FormFieldType\n     *\n     * @description\n     * Enumerates all the possible field types.\n     */",meta:{range:[62,200],filename:"models.js",lineno:5,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},kind:"class",tsdoc:"model.enum",name:"FormFieldType",description:"<p>Enumerates all the possible field types.</p>",longname:"FormFieldType",scope:"global",___id:"T000002R000003",___s:!0},subdoclets:{member:[{doclet:{comment:"/**\n         * @name FormFieldType.group\n         *\n         * @description\n         * A field group\n         */",meta:{range:[243,355],filename:"models.js",lineno:13,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"group",description:"<p>A field group</p>",memberof:"FormFieldType",longname:"FormFieldType.group",scope:"static",kind:"member",___id:"T000002R000005",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.choiceGroup\n         *\n         * @description\n         * A conditional field group\n         */",meta:{range:[418,548],filename:"models.js",lineno:22,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"choiceGroup",description:"<p>A conditional field group</p>",memberof:"FormFieldType",longname:"FormFieldType.choiceGroup",scope:"static",kind:"member",___id:"T000002R000008",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.address\n         *\n         * @description\n         * Address input\n         */",meta:{range:[623,737],filename:"models.js",lineno:31,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"address",description:"<p>Address input</p>",memberof:"FormFieldType",longname:"FormFieldType.address",scope:"static",kind:"member",___id:"T000002R000011",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.bloodPressure\n         *\n         * @description\n         * Blood pressure input\n         */",meta:{range:[834,961],filename:"models.js",lineno:41,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"bloodPressure",description:"<p>Blood pressure input</p>",memberof:"FormFieldType",longname:"FormFieldType.bloodPressure",scope:"static",kind:"member",___id:"T000002R000015",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.check\n         *\n         * @description\n         * Checkbox input\n         */",meta:{range:[1070,1183],filename:"models.js",lineno:51,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"check",description:"<p>Checkbox input</p>",memberof:"FormFieldType",longname:"FormFieldType.check",scope:"static",kind:"member",___id:"T000002R000019",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.date\n         *\n         * @description\n         * Date picker\n         */",meta:{range:[1277,1386],filename:"models.js",lineno:61,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"date",description:"<p>Date picker</p>",memberof:"FormFieldType",longname:"FormFieldType.date",scope:"static",kind:"member",___id:"T000002R000023",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.doctor\n         *\n         * @description\n         * Doctor input\n         */",meta:{range:[1475,1587],filename:"models.js",lineno:71,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"doctor",description:"<p>Doctor input</p>",memberof:"FormFieldType",longname:"FormFieldType.doctor",scope:"static",kind:"member",___id:"T000002R000027",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.email\n         *\n         * @description\n         * Email input\n         */",meta:{range:[1682,1792],filename:"models.js",lineno:81,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"email",description:"<p>Email input</p>",memberof:"FormFieldType",longname:"FormFieldType.email",scope:"static",kind:"member",___id:"T000002R000031",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.gender\n         *\n         * @description\n         * Gender selector\n         */",meta:{range:[1885,2e3],filename:"models.js",lineno:91,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"gender",description:"<p>Gender selector</p>",memberof:"FormFieldType",longname:"FormFieldType.gender",scope:"static",kind:"member",___id:"T000002R000035",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.height\n         *\n         * @description\n         * Height input\n         */",meta:{range:[2184,2296],filename:"models.js",lineno:105,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"height",description:"<p>Height input</p>",memberof:"FormFieldType",longname:"FormFieldType.height",scope:"static",kind:"member",___id:"T000002R000040",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.month\n         *\n         * @description\n         * Month picker\n         */",meta:{range:[2391,2502],filename:"models.js",lineno:115,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"month",description:"<p>Month picker</p>",memberof:"FormFieldType",longname:"FormFieldType.month",scope:"static",kind:"member",___id:"T000002R000044",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.option\n         *\n         * @description\n         * Option selector\n         */",meta:{range:[2593,2708],filename:"models.js",lineno:125,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"option",description:"<p>Option selector</p>",memberof:"FormFieldType",longname:"FormFieldType.option",scope:"static",kind:"member",___id:"T000002R000048",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.password\n         *\n         * @description\n         * Password input\n         */",meta:{range:[2805,2921],filename:"models.js",lineno:135,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"password",description:"<p>Password input</p>",memberof:"FormFieldType",longname:"FormFieldType.password",scope:"static",kind:"member",___id:"T000002R000052",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.phone\n         *\n         * @description\n         * Phone input\n         */",meta:{range:[3020,3130],filename:"models.js",lineno:145,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"phone",description:"<p>Phone input</p>",memberof:"FormFieldType",longname:"FormFieldType.phone",scope:"static",kind:"member",___id:"T000002R000056",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.text\n         *\n         * @description\n         * Text input\n         */",meta:{range:[3223,3331],filename:"models.js",lineno:155,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"text",description:"<p>Text input</p>",memberof:"FormFieldType",longname:"FormFieldType.text",scope:"static",kind:"member",___id:"T000002R000060",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.textArea\n         *\n         * @description\n         * Text area input\n         */",meta:{range:[3422,3539],filename:"models.js",lineno:165,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"textArea",description:"<p>Text area input</p>",memberof:"FormFieldType",longname:"FormFieldType.textArea",scope:"static",kind:"member",___id:"T000002R000064",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.title\n         *\n         * @description\n         * Title selector\n         */",meta:{range:[3638,3751],filename:"models.js",lineno:175,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"title",description:"<p>Title selector</p>",memberof:"FormFieldType",longname:"FormFieldType.title",scope:"static",kind:"member",___id:"T000002R000068",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.weight\n         *\n         * @description\n         * Weight input\n         */",meta:{range:[4020,4132],filename:"models.js",lineno:193,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"weight",description:"<p>Weight input</p>",memberof:"FormFieldType",longname:"FormFieldType.weight",scope:"static",kind:"member",___id:"T000002R000073",___s:!0},parent:"FormFieldType"},{doclet:{comment:"/**\n         * @name FormFieldType.yesNo\n         *\n         * @description\n         * Yes/No selector\n         */",meta:{range:[4227,4341],filename:"models.js",lineno:203,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},name:"yesNo",description:"<p>Yes/No selector</p>",memberof:"FormFieldType",longname:"FormFieldType.yesNo",scope:"static",kind:"member",___id:"T000002R000077",___s:!0},parent:"FormFieldType"}]}},e.doclets.HelpData={doclet:{comment:"/**\r\n     * @tsdoc model.interface\r\n     * @name HelpData\r\n     *\r\n     * @description\r\n     * Help options for a form field.\r\n     *\r\n     * @property {string} popupLink Text show in the link to open a help popup (if not provided the help message is shown in place).\r\n     * @property {string} text Help message to display (as text).\r\n     * @property {string} html Help message to display (as html).\r\n     */",meta:{range:[506,916],filename:"comments.js",lineno:13,path:"c:\\dev\\git\\2sol\\formie\\demo\\ionic\\www\\docs\\tmp",code:{}},kind:"class",tsdoc:"model.interface",name:"HelpData",description:"<p>Help options for a form field.</p>",properties:[{type:{names:["string"]},description:"<p>Text show in the link to open a help popup (if not provided the help message is shown in place).</p>",name:"popupLink"},{type:{names:["string"]},description:"<p>Help message to display (as text).</p>",name:"text"},{type:{names:["string"]},description:"<p>Help message to display (as html).</p>",name:"html"}],longname:"HelpData",scope:"global",___id:"T000002R000192",___s:!0},subdoclets:{}},e.doclets.Form={doclet:{comment:"/**\n     * @tsdoc model.class\n     * @name Form\n     *\n     * @description\n     * Model for a form.\n     */",meta:{range:[16801,16908],filename:"models.js",lineno:451,path:"c:\\dev\\git\\2sol\\formie\\src\\models\\auto",code:{}},kind:"class",tsdoc:"model.class",name:"Form",description:"<p>Model for a form.</p>",longname:"Form",scope:"global",___id:"T000002R000153",___s:!0},subdoclets:{}},e.doclets.ValidationData={doclet:{comment:"/**\r\n     * @tsdoc model.interface\r\n     * @name ValidationData\r\n     *\r\n     * @description\r\n     * Validation rules for a form field.\r\n     *\r\n     * @property {boolean} required If the field is required.\r\n     * @property {string} naCheck A checkbox is shown with this message to ignore validation (eg. I don't know my blood pressure).\r\n     * @property {string} confirm The id of the field to match (eg. the id of another field with the password to confirm).\r\n     */",meta:{range:[34,505],filename:"comments.js",lineno:2,path:"c:\\dev\\git\\2sol\\formie\\demo\\ionic\\www\\docs\\tmp",code:{}},kind:"class",tsdoc:"model.interface",name:"ValidationData",description:"<p>Validation rules for a form field.</p>",properties:[{type:{names:["boolean"]},description:"<p>If the field is required.</p>",name:"required"},{type:{names:["string"]},description:"<p>A checkbox is shown with this message to ignore validation (eg. I don't know my blood pressure).</p>",name:"naCheck"},{type:{names:["string"]},description:"<p>The id of the field to match (eg. the id of another field with the password to confirm).</p>",name:"confirm"}],longname:"ValidationData",scope:"global",___id:"T000002R000191",___s:!0},subdoclets:{}},e}]),angular.module("docsModule").directive("tsDocletMenu",["jsguideDataService",function(e){var t={restrict:"E",scope:!0,template:'<div class=menuIcon><button class="cmn-toggle-switch cmn-toggle-switch__htx" ng-class="{active: visible}" ng-click="visible = !visible"><span>toggle menu</span></button></div><div class=menuContainer ng-show=visible><div class=guide ng-repeat="guide in menu.guides"><a ui-sref="demo.docs.guide({guideId: guide})">{{guide}}</a></div><div class=menuSection ng-repeat="(sectionName, section) in menu.doclets"><div class=sectionName>{{sectionName}}</div><div class=menuItem ng-repeat="menuItem in section"><div class=itemName><a ui-sref="demo.docs.doclet({docletId: menuItem})">{{menuItem}}</a></div></div></div></div>'};return t.link=function(t){t.visible=!1,t.menu=e.menu},t}]),angular.module("docsModule").directive("tsGuide",["$stateParams","jsguideDataService",function(e,t){var n={restrict:"E",scope:!0,template:'<div class=jsguide ng-bind-html="guide | trustedHtml"></div>'};return n.link=function(n){n.guide=t.guides[e.guideId]},n}]),angular.module("docsModule").directive("tsDoclet",["$stateParams","jsguideDataService",function(e,t){var n={restrict:"E",scope:!0,template:"<ts-doclet-class data=data ng-if=\"data.doclet.tsdoc !== 'model.enum'\"></ts-doclet-class><ts-doclet-enum data=data ng-if=\"data.doclet.tsdoc === 'model.enum'\"></ts-doclet-enum>"};return n.link=function(n){n.data=t.doclets[e.docletId]},n}]),angular.module("docsModule").directive("tsDocletClass",[function(){var e={restrict:"E",scope:{data:"="},template:'<div class=header><div class=name>{{data.doclet.longname}}</div><div class=description ng-bind-html="data.doclet.description | trustedHtml"></div></div><div class="properties members"><div class=title>Properties</div><div class="member property" ng-repeat="property in data.doclet.properties"><div class=name>{{property.name}}</div><div class=type>({{property.type.names[0]}})</div><div class=description ng-bind-html="property.description | trustedHtml"></div></div></div>'};return e.link=function(){},e}]),angular.module("docsModule").directive("tsDocletEnum",[function(){var e={restrict:"E",scope:{data:"="},template:'<div class=header><div class=name>{{data.doclet.longname}}</div><div class=description ng-bind-html="data.doclet.description | trustedHtml"></div></div><div class=members><div class=title>Options</div><div class=member ng-repeat="member in data.subdoclets.member"><div class=name>{{member.doclet.name}}</div><div class=description ng-bind-html="member.doclet.description | trustedHtml"></div></div></div>'};return e.link=function(){},e}]),angular.module("docsModule").filter("trustedHtml",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}])